= Guard

Guard is a command line tool to easly handle events on files modifications.

== Features

- {FSEvent}[http://en.wikipedia.org/wiki/FSEvents] support on Mac OS X 10.5+ (without RubyCocoa!, {rb-fsevent gem, >= 0.3.5}[https://rubygems.org/gems/rb-fsevent] required)
- {Inotify}[http://en.wikipedia.org/wiki/Inotify] support on Linux ({rb-inotify gem, >= 0.5.1}[https://rubygems.org/gems/rb-inotify] required)
- Polling for others (help us to support more systems)
- Super fast change detection (when polling not used)
- Automatic files modifications detection (even new files are detected)
- Growl notification ({growlnotify}[http://growl.info/documentation/growlnotify.php] & {growl gem}[https://rubygems.org/gems/growl] required)
- Libnotify notification ({libnotify gem}[https://rubygems.org/gems/libnotify] required)
- Tested on Ruby 1.8.6, 1.8.7 & 1.9.2

== Install

Install the gem:

    gem install guard

Add it to your Gemfile (inside test group):

    gem 'guard'

Generate an empty Guardfile with:

    guard init

Add guard(s) you need (see available guards below)

=== On Mac OS X

Install rb-fsevent for {FSEvent}[http://en.wikipedia.org/wiki/FSEvents] support

    gem install rb-fsevent

Install growl for Growl notification support

    gem install growl

And add it to you Gemfile

    gem 'growl'

=== On Linux

Install rb-inotify for {inotify}[http://en.wikipedia.org/wiki/Inotify] support

    gem install rb-inotify

Install libnotify for libonity notification support

    gem install libnotify

And add it to you Gemfile

    gem 'libnotify'

== Usage

Just launch Guard inside your ruby/rails project with:

    guard

Shell can be cleared after each change with:

    guard -c

Options list is available with:

    guard help [TASK]

Signal handlers are used to interact with Guard:

- Ctrl-C - Quit Guard (call stop guard(s) method before)
- Ctrl-\ - Call run_all guard(s) method
- Ctrl-Z - Call reload guard(s) method

== Available Guards

- {guard-rspec}[http://github.com/guard/guard-rspec] by {Thibaud Guillaume-Gentil}[http://github.com/thibaudgg]
- {guard-test}[http://github.com/guard/guard-test] by {RÃ©my Coutable}[http://github.com/rymai]
- {guard-minitest}[http://github.com/guard/guard-minitest] by {Yann Lugrin}[http://github.com/yannlugrin]
- {guard-livereload}[http://github.com/guard/guard-livereload] by {Thibaud Guillaume-Gentil}[http://github.com/thibaudgg]
- {guard-sass}[http://github.com/guard/guard-sass] by {Joshua Hawxwell}[http://github.com/hawx]
- {guard-compass}[http://github.com/guard/guard-compass] by {Olivier Amblet}[http://github.com/oliamb]
- {guard-shell}[http://github.com/guard/guard-shell] by {Joshua Hawxwell}[http://github.com/hawx]
- {guard-bundler}[http://github.com/guard/guard-bundler] by {Yann Lugrin}[http://github.com/yannlugrin]
- {guard-passenger}[http://github.com/guard/guard-passenger] by {Fabio Kuhn}[http://github.com/mordaroso]
- {guard-coffeescript}[http://github.com/guard/guard-coffeescript] by {Michael Kessler}[http://github.com/netzpirat]
- {guard-nanoc}[http://github.com/guard/guard-nanoc] by {Yann Lugrin}[http://github.com/yannlugrin]

guard ideas:

- guard-spork
- guard-cucumber
- others ideas?

=== Add a guard to your Guardfile

Add it to your Gemfile (inside test group):

    gem '<guard-name>'

Add guard definition to your Guardfile by running this command:

    guard init <guard-name>

You are good to go!

== Create a guard

Create a new guard is very easy, just create a new gem with this basic structure:

    lib/
      guard/
        guard-name/
          templates/
            Guardfile (needed for guard init <guard-name>)
        guard-name.rb

lib/guard/guard-name.rb inherit from guard/guard and should overwrite at least one of the five guard methods. Example:

    require 'guard'
    require 'guard/guard'
    
    module Guard
      class GuardName < Guard
        
        def initialize(watchers = [], options = {})
          super
          # init stuff here, thx!
        end
        
        # ================
        # = Guard method =
        # ================
        
        # If one of those methods raise an exception, the Guard instance
        # will be removed from the active guard.
        
        # Call once when guard starts
        # Please override initialize method to init stuff
        def start
          true
        end
        
        # Call with Ctrl-C signal (when Guard quit)
        def stop
          true
        end
        
        # Call with Ctrl-Z signal
        # This method should be mainly used for "reload" (really!) actions like reloading passenger/spork/bundler/...
        def reload
          true
        end
        
        # Call with Ctrl-/ signal
        # This method should be principally used for long action like running all specs/tests/...
        def run_all
          true
        end
        
        # Call on file(s) modifications
        def run_on_change(paths)
          true
        end
        
      end
    end

Looks at available guards code for more concrete example.

== Guardfile DSL

Guardfile DSL consists of just two simple methods: guard & watch. Example:

    guard 'rspec', :version => 2 do
      watch('^spec/(.*)_spec.rb')
      watch('^lib/(.*)\.rb')        { |m| "spec/lib/#{m[1]}_spec.rb" }
      watch('^spec/spec_helper.rb') { "spec" }
      watch('^spec/spec_helper.rb') { `say hello` }
    end
    
- "guard" method allow to add a guard with an optional options hash
- "watch" method allow to define which files are supervised per this guard. A optional block can be added to overwrite path sending to run_on_change guard method or launch simple command.

== TODO

- Add more specs! Shame on me :)

== Development

- Source hosted at {GitHub}[http://github.com/guard/guard]
- Report issues/Questions/Feature requests on {GitHub Issues}[http://github.com/guard/guard/issues]

Pull requests are very welcome! Make sure your patches are well tested. Please create a topic branch for every separate change
you make.

== Authors

{Thibaud Guillaume-Gentil}[http://github.com/thibaudgg]