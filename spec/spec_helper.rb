# frozen_string_literal: true

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#

require "fileutils"

if ENV["CI"]
  require "simplecov"
  SimpleCov.start do
    add_filter "/spec"
  end

  require "codecov"
  SimpleCov.formatter = SimpleCov::Formatter::Codecov
end

ENV["GUARD_SPECS_RUNNING"] = "1"

path = "#{File.expand_path(__dir__)}/support/**/*.rb"
Dir[path].sort.each { |f| require f }

def stub_guardfile(contents = nil, &block)
  stub_file("Guardfile", contents, &block)
end

def stub_guardfile_rb(contents = nil, &block)
  stub_file("guardfile.rb", contents, &block)
end

def stub_user_guardfile(contents = nil, &block)
  stub_file("~/.Guardfile", contents, &block)
end

def stub_user_guard_rb(contents = nil, &block)
  stub_file("~/.guard.rb", contents, &block)
end

def stub_user_project_guardfile(contents = nil, &block)
  stub_file(".Guardfile", contents, &block)
end

def stub_file(path, contents = nil, &block)
  exists = !!contents

  pathname = instance_double(Pathname)
  allow(Pathname).to receive(:new).with(path).and_return(pathname)

  allow(pathname).to receive(:to_s).and_return(path)
  allow(pathname).to receive(:expand_path).and_return(pathname)
  allow(pathname).to receive(:exist?).and_return(exists)

  if exists
    if block
      allow(pathname).to receive(:read) do
        yield
      end
    else
      allow(pathname).to receive(:read).and_return(contents)
    end
  else
    allow(pathname).to receive(:read) do
      fail Errno::ENOENT
    end
  end

  pathname
end

# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    # be_bigger_than(2).and_smaller_than(4).description
    #   # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #   # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.

  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  # config.filter_run :focus
  config.filter_run focus: ENV["CI"] != "true"

  config.run_all_when_everything_filtered = true

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended.
  #
  # For more details, see:
  #   - http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax
  #   - http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://myronmars.to/n/dev-blog/2014/05/notable-changes-in-rspec-3#new__config_option_to_disable_rspeccore_monkey_patching
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  # config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    #
    # This is set in .rspec file
    # config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  config.raise_errors_for_deprecations!

  config.mock_with :rspec do |mocks|
    mocks.verify_doubled_constant_names = true
    mocks.verify_partial_doubles = true
  end

  config.before(:each, :stub_ui) do
    if Guard.const_defined?("UI") && Guard::UI.respond_to?(:info)
      # Stub all UI methods, so no visible output appears for the UI class
      allow(Guard::UI).to receive(:info)
      allow(Guard::UI).to receive(:warning)
      allow(Guard::UI).to receive(:error)
      allow(Guard::UI).to receive(:debug)
      allow(Guard::UI).to receive(:deprecation)
      allow(Guard::UI).to receive(:reset_and_clear)
    end
  end
end

RSpec.shared_context "with testing plugins" do
  before do
    Guard::Dummy = Class.new(Guard::Plugin) do
      def throwing
        throw :task_has_failed
      end

      def failing
        fail "I break your system"
      end

      def run_on_changes(_paths); "I'm a success"; end

      def run_on_change(_paths); end

      def run_on_modifications(_paths); end

      def run_on_additions(_paths); end

      def run_on_removals(_paths); end

      def run_on_deletion(_paths); end
    end
    Guard::Doe = Class.new(Guard::Plugin)
    Guard::FooBar = Class.new(Guard::Plugin)
    Guard::FooBaz = Class.new(Guard::Plugin)
  end

  after do
    Guard.__send__(:remove_const, :Dummy)
    Guard.__send__(:remove_const, :Doe)
    Guard.__send__(:remove_const, :FooBar)
    Guard.__send__(:remove_const, :FooBaz)
  end
end

RSpec.shared_context "Guard options" do
  let(:inline_guardfile) { "guard :dummy" }
  let(:base_options) { { watchdirs: Dir.pwd, inline: inline_guardfile, no_interactions: true } }
  let(:options) { base_options }
end

RSpec.shared_context "with engine" do
  require "guard/engine"
  require "guard/plugin"

  include_context "Guard options"
  include_context "with testing plugins"

  let(:engine) { Guard::Engine.new(options) }
  let(:interactor) do
    instance_double(
      "Guard::Interactor",
      interactive: true,
      "options=": true,
      foreground: :exit,
      background: true
    )
  end
  let(:listener) { instance_double("Listen::Listener", ignore: true, ignore!: true, start: true, stop: true) }

  let(:session) { engine.session }
  let(:groups) { engine.groups }
  let(:plugins) { engine.plugins }

  before do
    # Stub classes with side-effects
    allow(Guard::Interactor).to receive(:new).and_return(interactor)
    allow(Listen).to receive(:to).and_return(listener)
  end
end

RSpec.shared_context "with fake pry" do
  let(:output) { double }

  before do
    Thread.current[:engine] = engine
    class FakePry < Pry::Command
      def self.output; end
    end
  end

  after do
    Object.__send__(:remove_const, :FakePry)
    Thread.current[:engine] = nil
  end

  before do
    allow(FakePry).to receive(:output).and_return(output)
  end
end
